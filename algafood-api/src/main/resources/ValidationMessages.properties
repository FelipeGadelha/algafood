#javax.validation.constraints.AssertFalse.message     = deve ser falso
#javax.validation.constraints.AssertTrue.message      = deve ser verdadeiro
#javax.validation.constraints.DecimalMax.message      = deve ser menor que ${inclusive == true ? 'ou igual a ' : ''}{value}
#javax.validation.constraints.DecimalMin.message      = deve ser maior que ${inclusive == true ? 'ou igual a ' : ''}{value}
#javax.validation.constraints.Digits.message          = valor númerico fora do limite (<{integer} dígito>.<{fraction} dígitos> esperar)
#javax.validation.constraints.Email.message           = deve ser um endereço de e-mail bem formado
#javax.validation.constraints.Future.message          = deve ser uma data futura
#javax.validation.constraints.FutureOrPresent.message = deve ser uma data no presente ou no futuro
#javax.validation.constraints.Max.message             = deve ser menor que ou igual é {value}
#javax.validation.constraints.Min.message             = deve ser maior que ou igual é {value}
#javax.validation.constraints.Negative.message        = deve ser menor que 0
#javax.validation.constraints.NegativeOrZero.message  = deve ser menor ou igual a 0
#javax.validation.constraints.NotBlank.message        = não deve estar em branco
#javax.validation.constraints.NotEmpty.message        = não deve estar vazio
#javax.validation.constraints.NotNull.message         = não deve ser nulo
#javax.validation.constraints.Null.message            = deve ser nulo
#javax.validation.constraints.Past.message            = deve ser uma data passada
#javax.validation.constraints.PastOrPresent.message   = deve ser uma data no passado ou no presente
#javax.validation.constraints.Pattern.message         = deve corresponder a "{regexp}"
#javax.validation.constraints.Positive.message        = deve ser maior que 0
#javax.validation.constraints.PositiveOrZero.message  = deve ser maior ou igual a 0
#javax.validation.constraints.Size.message            = tamanho deve ser entre {min} e {max}
#
#org.hibernate.validator.constraints.CreditCardNumber.message        = número do cartão de crédito inválido
#org.hibernate.validator.constraints.Currency.message                = moeda inválida (deve ser uma de {value})
#org.hibernate.validator.constraints.EAN.message                     = código de barras {type} inválido
#org.hibernate.validator.constraints.Email.message                   = deve ser um endereço de e-mail bem formado
#org.hibernate.validator.constraints.ISBN.message                    = ISBN inválido
#org.hibernate.validator.constraints.Length.message                  = o comprimento deve ser entre {min} e {max}
#org.hibernate.validator.constraints.CodePointLength.message         = o comprimento deve ser entre {min} e {max}
#org.hibernate.validator.constraints.LuhnCheck.message               = o dígito de verificação para ${validatedValue} é inválido, soma de verificação Luhn Modulo 10 com falha
#org.hibernate.validator.constraints.Mod10Check.message              = o dígito de verificação para ${validatedValue} é inválido, soma de verificação Modulo 10 com falha
#org.hibernate.validator.constraints.Mod11Check.message              = o dígito de verificação para ${validatedValue} é inválido, soma de verificação Modulo 11 com falha
#org.hibernate.validator.constraints.ModCheck.message                = o dígito de verificação para ${validatedValue} é inválido, soma de verificação {modType} com falha
#org.hibernate.validator.constraints.NotBlank.message                = não deve estar em branco
#org.hibernate.validator.constraints.NotEmpty.message                = não deve estar vazio
#org.hibernate.validator.constraints.ParametersScriptAssert.message  = expressão de script "{script}" não avaliou para true
#org.hibernate.validator.constraints.Range.message                   = deve estar entre {min} e {max}
#org.hibernate.validator.constraints.SafeHtml.message                = pode ter conteúdo HTML não seguro
#org.hibernate.validator.constraints.ScriptAssert.message            = expressão de script "{script}" não avaliou para true
#org.hibernate.validator.constraints.UniqueElements.message          = deve conter apenas elementos exclusivos
#org.hibernate.validator.constraints.URL.message                     = deve ser uma URL inválido
#
#org.hibernate.validator.constraints.br.CNPJ.message                 = número do registro de contribuinte corporativo brasileiro (CNPJ) inválido
#org.hibernate.validator.constraints.br.CPF.message                  = número do registro de contribuinte individual brasileiro (CPF) inválido
#org.hibernate.validator.constraints.br.TituloEleitoral.message      = número do título de eleitor brasileiro inválido
#
#org.hibernate.validator.constraints.pl.REGON.message                = número de identificação de contribuinte polonês (REGON) inválido
#org.hibernate.validator.constraints.pl.NIP.message                  = número de identificação de VAT (NIP) inválido
#org.hibernate.validator.constraints.pl.PESEL.message                = número de identificação nacional polonesa (PESEL) inválido
#
#org.hibernate.validator.constraints.time.DurationMax.message        = deve ser menor que${inclusive == true ? ' ou igual a' : ''}${days == 0 ? '' : days == 1 ? ' 1 dia' : ' ' += days += ' dias'}${hours == 0 ? '' : hours == 1 ? ' 1 hora' : ' ' += hours += ' horas'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minuto' : ' ' += minutes += ' minutos'}${seconds == 0 ? '' : seconds == 1 ? ' 1 segundo' : ' ' += seconds += ' segundos'}${millis == 0 ? '' : millis == 1 ? ' 1 mili' : ' ' += millis += ' miliss'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}
#org.hibernate.validator.constraints.time.DurationMin.message        = deve ser maior que${inclusive == true ? ' ou igual a' : ''}${days == 0 ? '' : days == 1 ? ' 1 dia' : ' ' += days += ' dias'}${hours == 0 ? '' : hours == 1 ? ' 1 hora' : ' ' += hours += ' horas'}${minutes == 0 ? '' : minutes == 1 ? ' 1 minuto' : ' ' += minutes += ' minutos'}${seconds == 0 ? '' : seconds == 1 ? ' 1 segundo' : ' ' += seconds += ' segundos'}${millis == 0 ? '' : millis == 1 ? ' 1 mili' : ' ' += millis += ' miliss'}${nanos == 0 ? '' : nanos == 1 ? ' 1 nano' : ' ' += nanos += ' nanos'}
